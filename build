#!/bin/bash

# this uses the Proton-CLang toolchain
# https://github.com/kdrag0n/proton-clang.git
# when building under WSL make sure the distro uses WSL 2

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
	--skip-update-submodule)
	SKIPUPDATESUBMODULE=y
	shift
	;;
	--skip-cleanup|--skip-cleanup)
	SKIPCLEAN=y
	shift
	;;
	--skip-build)
	SKIPBUILD=y
	shift
	;;
	--no-branch)
	NOBRANCHINTITLE=y
	shift
	;;
	*)
	POSITIONAL+=("$1")
	shift
	;;
esac
done
set -- "${POSITIONAL[@]}"

if [ -z $SKIPUPDATESUBMODULE ]; then
	echo "Updating submodules"
	git submodule update --recursive --init
else
	echo "Skipping submodule update"
fi

export KBUILD_BUILD_USER="user"
export KBUILD_BUILD_HOST="build"
export PATH="$HOME/proton-clang/bin:$PATH"
export LD_LIBRARY_PATH="$HOME/proton-clang/lib:$LD_LIBRARY_PATH"
export ARCH=arm64
export SUBARCH=arm64
export AR=llvm-ar
export NM=llvm-nm
export OBJCOPY=llvm-objcopy
export OBJDUMP=llvm-objdump
export STRIP=llvm-strip

if [ -z $SKIPCLEAN ]; then
	echo "Cleaning output dir"
	rm -rf out
	make clean && make mrproper
	mkdir -p out
else
	echo "Skipping cleanup"
fi

if [ -z $SKIPBUILD ]; then
	echo "Build kernel"

	#Make config
	make O=out ARCH=arm64 nb1_defconfig

	if [ -z $NOBRANCHINTITLE ]; then
	    CURRENT_BRANCH=$(git branch --show-current)
	    CURRENT_BRANCH_CLEAN=${CURRENT_BRANCH//_/}
	    CURRENT_BRANCH_CLEAN=${CURRENT_BRANCH_CLEAN// /_}
	    CURRENT_BRANCH_CLEAN=${CURRENT_BRANCH_CLEAN////_}
	    CURRENT_BRANCH_CLEAN=${CURRENT_BRANCH_CLEAN//[^a-zA-Z0-9_]/}-
	else
	    CURRENT_BRANCH_CLEAN=
	fi

	LAST_COMMIT=$(git rev-parse --verify --short=8 HEAD)

	#Build kernel
	make -j$(nproc --all) O=out \
		ARCH=arm64 \
		CC="ccache clang" \
		LD=ld.lld AR=llvm-ar NM=llvm-nm STRIP=llvm-strip \
		OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump OBJSIZE=llvm-size \
		READELF=llvm-readelf HOSTCC=clang HOSTCXX=clang++ HOSTAR=llvm-ar \
		CROSS_COMPILE=aarch64-linux-gnu- \
		CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
		LOCALVERSION=-${CURRENT_BRANCH_CLEAN}$(date +"%d%m%y%H%M")-$LAST_COMMIT $*
else
	echo "Skipping kernel build"
fi

echo "Done."